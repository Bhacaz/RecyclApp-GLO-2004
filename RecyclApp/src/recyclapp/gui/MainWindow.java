/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package recyclapp.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import recyclapp.elements.Convoyeur;
import recyclapp.elements.EntreeUsine;
import recyclapp.elements.Equipement;
import recyclapp.elements.Panier;
import recyclapp.elements.Station;
import static recyclapp.gui.MainWindow.ApplicationMode.ADD;
import static recyclapp.gui.MainWindow.ApplicationMode.SELECT;
import recyclapp.utilitaires.Controleur;
import recyclapp.utilitaires.Controleur.ModesNoeuds;
import static recyclapp.utilitaires.Controleur.ModesNoeuds.CONVOYEUR1;
import static recyclapp.utilitaires.Controleur.ModesNoeuds.ENTREE;
import static recyclapp.utilitaires.Controleur.ModesNoeuds.JONCTION;
import static recyclapp.utilitaires.Controleur.ModesNoeuds.SORTIE;
import static recyclapp.utilitaires.Controleur.ModesNoeuds.STATION;
import sun.awt.image.ImageAccessException;



/**
 *
 * @author bhacaz
 */
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".recyclapp");
        }
        @Override
        public String getDescription() {
            return "RecyclApp documents (*.recyclapp)";
        }
    } 

public class MainWindow extends javax.swing.JFrame {

    public Controleur controller;
    public ModesNoeuds modeDeCreationDeNoeudSelectionne;
    private ApplicationMode applicationMode;
    public Point actualMousePoint;
    int pointUsine;
    int taille;
    boolean magnetique;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        controller = new Controleur();
        initComponents();
        drawingPanel.asgControleur(controller);
        Image i;
        try {
            i = ImageIO.read(getClass().getResource("images/greg.jpg"));
            this.setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        pointUsine = controller.PIXEL_PER_METER * controller.reqZoom();
    }
    public enum ApplicationMode {
		SELECT, ADD
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChoisirFichier = new javax.swing.JFileChooser();
        FenetrePrincipale = new javax.swing.JSplitPane();
        CotePlan = new javax.swing.JPanel();
        SideBar = new javax.swing.JToolBar();
        BoutonAjouterStation = new javax.swing.JButton();
        BoutonAjouterEntree = new javax.swing.JButton();
        BoutonAjouterSortie = new javax.swing.JButton();
        BoutonAjouterJonction = new javax.swing.JButton();
        BoutonAjouterConvoyeur = new javax.swing.JButton();
        SeparateurSideBar = new javax.swing.JToolBar.Separator();
        BoutonZoomPlus = new javax.swing.JButton();
        BoutonZoomMoins = new javax.swing.JButton();
        BoutonGrille = new javax.swing.JToggleButton();
        BoutonGrilleMagnetique = new javax.swing.JToggleButton();
        ConteneurPlan = new javax.swing.JScrollPane();
        drawingPanel = new recyclapp.gui.DrawingPanel();
        TopBar = new javax.swing.JToolBar();
        BoutonNouveau = new javax.swing.JButton();
        BoutonOuvrir = new javax.swing.JButton();
        BoutonEnresgistrer = new javax.swing.JButton();
        BoutonAnnuler = new javax.swing.JButton();
        BoutonRefaire = new javax.swing.JButton();
        BoutonSupprimer = new javax.swing.JButton();
        MousePosition = new javax.swing.JLabel();
        CotePanneaux = new javax.swing.JSplitPane();
        PanneauDetails = new javax.swing.JPanel();
        LabelDetails = new javax.swing.JLabel();
        ContenurDetails = new javax.swing.JScrollPane();
        Details = new javax.swing.JTextArea();
        PanneauConsolePanier = new javax.swing.JTabbedPane();
        PanneauPanier = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PanierTextArea = new javax.swing.JTextArea();
        PanneauConsole = new javax.swing.JPanel();
        ConteneurConsole = new javax.swing.JScrollPane();
        Console = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        MenuBarFichier = new javax.swing.JMenu();
        MenuBarFichierNouveau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        MenuBarFichierOuvrir = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        MenuBarFichierEnregistrer = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        MenuBarFichierExporter = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuBarFichierQuitter = new javax.swing.JMenuItem();
        MenuBarEdition = new javax.swing.JMenu();
        MenuBarEditionAnnuler = new javax.swing.JMenuItem();
        MenuBarEditionRetablir = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        MenuBarEditionSupprimer = new javax.swing.JMenuItem();
        MenuBarAffichage = new javax.swing.JMenu();
        MenuBarAffichageMaximiser = new javax.swing.JMenuItem();
        MenuBarAffichageZoom = new javax.swing.JMenu();
        Zoom0 = new javax.swing.JMenuItem();
        Zoom25 = new javax.swing.JMenuItem();
        Zoom50 = new javax.swing.JMenuItem();
        Zoom75 = new javax.swing.JMenuItem();
        Zoom100 = new javax.swing.JMenuItem();

        ChoisirFichier.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RecyclApp");
        setMinimumSize(new java.awt.Dimension(800, 600));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        FenetrePrincipale.setDividerLocation((int)(this.getWidth()*0.75));

        CotePlan.setPreferredSize(new java.awt.Dimension(1300, 877));

        SideBar.setBorder(null);
        SideBar.setFloatable(false);
        SideBar.setOrientation(javax.swing.SwingConstants.VERTICAL);
        SideBar.setRollover(true);
        SideBar.setMinimumSize(new java.awt.Dimension(50, 500));
        SideBar.setPreferredSize(new java.awt.Dimension(50, 500));

        BoutonAjouterStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/ajouterStation.png"))); // NOI18N
        BoutonAjouterStation.setMnemonic('S');
        BoutonAjouterStation.setToolTipText("Ajouter une station (Alt+S)");
        BoutonAjouterStation.setFocusable(false);
        BoutonAjouterStation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonAjouterStation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonAjouterStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAjouterStationActionPerformed(evt);
            }
        });
        SideBar.add(BoutonAjouterStation);

        BoutonAjouterEntree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/ajouterEntree.png"))); // NOI18N
        BoutonAjouterEntree.setMnemonic('I');
        BoutonAjouterEntree.setToolTipText("Ajouter une entr√©e (Alt+I)");
        BoutonAjouterEntree.setFocusable(false);
        BoutonAjouterEntree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonAjouterEntree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonAjouterEntree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAjouterEntreeActionPerformed(evt);
            }
        });
        SideBar.add(BoutonAjouterEntree);

        BoutonAjouterSortie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/ajouterSortie.png"))); // NOI18N
        BoutonAjouterSortie.setMnemonic('O');
        BoutonAjouterSortie.setToolTipText("Ajouter une sortie (Alt+O)");
        BoutonAjouterSortie.setFocusable(false);
        BoutonAjouterSortie.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonAjouterSortie.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonAjouterSortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAjouterSortieActionPerformed(evt);
            }
        });
        SideBar.add(BoutonAjouterSortie);

        BoutonAjouterJonction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/ajouterJonction.png"))); // NOI18N
        BoutonAjouterJonction.setMnemonic('J');
        BoutonAjouterJonction.setToolTipText("Ajouter une jonction (Alt+J)");
        BoutonAjouterJonction.setFocusable(false);
        BoutonAjouterJonction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonAjouterJonction.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonAjouterJonction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAjouterJonctionActionPerformed(evt);
            }
        });
        SideBar.add(BoutonAjouterJonction);

        BoutonAjouterConvoyeur.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/ajouterConvoyeur.png"))); // NOI18N
        BoutonAjouterConvoyeur.setMnemonic('C');
        BoutonAjouterConvoyeur.setToolTipText("Ajouter un convoyeur (Alt+C)");
        BoutonAjouterConvoyeur.setFocusable(false);
        BoutonAjouterConvoyeur.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonAjouterConvoyeur.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonAjouterConvoyeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAjouterConvoyeurActionPerformed(evt);
            }
        });
        SideBar.add(BoutonAjouterConvoyeur);
        SideBar.add(SeparateurSideBar);

        BoutonZoomPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/zoomPlus.png"))); // NOI18N
        BoutonZoomPlus.setFocusable(false);
        BoutonZoomPlus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonZoomPlus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonZoomPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonZoomPlusActionPerformed(evt);
            }
        });
        SideBar.add(BoutonZoomPlus);

        BoutonZoomMoins.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/zoomMoins.png"))); // NOI18N
        BoutonZoomMoins.setFocusable(false);
        BoutonZoomMoins.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonZoomMoins.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonZoomMoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonZoomMoinsActionPerformed(evt);
            }
        });
        SideBar.add(BoutonZoomMoins);

        BoutonGrille.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/grille.png"))); // NOI18N
        BoutonGrille.setFocusable(false);
        BoutonGrille.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonGrille.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonGrille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonGrilleActionPerformed(evt);
            }
        });
        SideBar.add(BoutonGrille);

        BoutonGrilleMagnetique.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/grilleMagnetique.png"))); // NOI18N
        BoutonGrilleMagnetique.setEnabled(false);
        BoutonGrilleMagnetique.setFocusable(false);
        BoutonGrilleMagnetique.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonGrilleMagnetique.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonGrilleMagnetique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonGrilleMagnetiqueActionPerformed(evt);
            }
        });
        SideBar.add(BoutonGrilleMagnetique);

        ConteneurPlan.setPreferredSize(new java.awt.Dimension(1210, 859));

        drawingPanel.setMaximumSize(new java.awt.Dimension(1000000, 1000000));
        drawingPanel.setPreferredSize(new java.awt.Dimension(controller.getDimensionCentreDeTri().width*20, controller.getDimensionCentreDeTri().height*20));
        drawingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                drawingPanelMouseMoved(evt);
            }
        });
        drawingPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawingPanelMouseWheelMoved(evt);
            }
        });
        drawingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawingPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1242, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 824, Short.MAX_VALUE)
        );

        ConteneurPlan.setViewportView(drawingPanel);

        TopBar.setFloatable(false);
        TopBar.setRollover(true);

        BoutonNouveau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/nouveau.png"))); // NOI18N
        BoutonNouveau.setToolTipText("Nouveau (Ctrl+N)");
        BoutonNouveau.setFocusable(false);
        BoutonNouveau.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonNouveau.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        TopBar.add(BoutonNouveau);

        BoutonOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/charger.png"))); // NOI18N
        BoutonOuvrir.setToolTipText("Ouvrir (Ctrl+O)");
        BoutonOuvrir.setFocusable(false);
        BoutonOuvrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonOuvrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonOuvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonOuvrirActionPerformed(evt);
            }
        });
        TopBar.add(BoutonOuvrir);

        BoutonEnresgistrer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/sauvegarder.png"))); // NOI18N
        BoutonEnresgistrer.setToolTipText("Enresgistrer sous (Ctrl+S)");
        BoutonEnresgistrer.setFocusable(false);
        BoutonEnresgistrer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonEnresgistrer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonEnresgistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonEnresgistrerActionPerformed(evt);
            }
        });
        TopBar.add(BoutonEnresgistrer);

        BoutonAnnuler.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/annuler.png"))); // NOI18N
        BoutonAnnuler.setToolTipText("Annuler (Ctrl+Z)");
        BoutonAnnuler.setFocusable(false);
        BoutonAnnuler.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonAnnuler.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAnnulerActionPerformed(evt);
            }
        });
        TopBar.add(BoutonAnnuler);

        BoutonRefaire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/refaire.png"))); // NOI18N
        BoutonRefaire.setToolTipText("R√©p√©ter (Ctrl+Y)");
        BoutonRefaire.setFocusable(false);
        BoutonRefaire.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonRefaire.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonRefaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRefaireActionPerformed(evt);
            }
        });
        TopBar.add(BoutonRefaire);

        BoutonSupprimer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recyclapp/gui/images/supprimer.png"))); // NOI18N
        BoutonSupprimer.setToolTipText("Supprimer (Suppr)");
        BoutonSupprimer.setFocusable(false);
        BoutonSupprimer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BoutonSupprimer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BoutonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonSupprimerActionPerformed(evt);
            }
        });
        TopBar.add(BoutonSupprimer);

        javax.swing.GroupLayout CotePlanLayout = new javax.swing.GroupLayout(CotePlan);
        CotePlan.setLayout(CotePlanLayout);
        CotePlanLayout.setHorizontalGroup(
            CotePlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TopBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
            .addGroup(CotePlanLayout.createSequentialGroup()
                .addComponent(SideBar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CotePlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MousePosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConteneurPlan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        CotePlanLayout.setVerticalGroup(
            CotePlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CotePlanLayout.createSequentialGroup()
                .addComponent(TopBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CotePlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CotePlanLayout.createSequentialGroup()
                        .addComponent(ConteneurPlan, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MousePosition, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(SideBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        FenetrePrincipale.setLeftComponent(CotePlan);

        CotePanneaux.setDividerLocation(450);
        CotePanneaux.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        PanneauDetails.setPreferredSize(new java.awt.Dimension(300, 450));

        LabelDetails.setText("Propri√©t√©s de l'objet s√©lection√©");

        Details.setEditable(false);
        Details.setColumns(20);
        Details.setRows(5);
        ContenurDetails.setViewportView(Details);

        javax.swing.GroupLayout PanneauDetailsLayout = new javax.swing.GroupLayout(PanneauDetails);
        PanneauDetails.setLayout(PanneauDetailsLayout);
        PanneauDetailsLayout.setHorizontalGroup(
            PanneauDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanneauDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContenurDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addComponent(LabelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanneauDetailsLayout.setVerticalGroup(
            PanneauDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContenurDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );

        CotePanneaux.setTopComponent(PanneauDetails);

        PanneauConsolePanier.setPreferredSize(new java.awt.Dimension(300, 450));

        PanierTextArea.setColumns(20);
        PanierTextArea.setRows(5);
        jScrollPane1.setViewportView(PanierTextArea);

        javax.swing.GroupLayout PanneauPanierLayout = new javax.swing.GroupLayout(PanneauPanier);
        PanneauPanier.setLayout(PanneauPanierLayout);
        PanneauPanierLayout.setHorizontalGroup(
            PanneauPanierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauPanierLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanneauPanierLayout.setVerticalGroup(
            PanneauPanierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauPanierLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                .addContainerGap())
        );

        PanneauConsolePanier.addTab("Panier de produits", PanneauPanier);

        Console.setEditable(false);
        Console.setColumns(20);
        Console.setRows(5);
        PrintStream out = new PrintStream(new ByteArrayOutputStream() {
            public synchronized void flush() throws IOException {
                Console.setText(toString());
            }
        }, true);

        System.setErr(out);
        System.setOut(out);
        ConteneurConsole.setViewportView(Console);
        ConteneurConsole.setViewportView(Console);

        javax.swing.GroupLayout PanneauConsoleLayout = new javax.swing.GroupLayout(PanneauConsole);
        PanneauConsole.setLayout(PanneauConsoleLayout);
        PanneauConsoleLayout.setHorizontalGroup(
            PanneauConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauConsoleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConteneurConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanneauConsoleLayout.setVerticalGroup(
            PanneauConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanneauConsoleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConteneurConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                .addContainerGap())
        );

        PanneauConsolePanier.addTab("Console", PanneauConsole);

        CotePanneaux.setRightComponent(PanneauConsolePanier);

        FenetrePrincipale.setRightComponent(CotePanneaux);

        MenuBarFichier.setText("Fichier");

        MenuBarFichierNouveau.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarFichierNouveau.setText("Nouveau");
        MenuBarFichier.add(MenuBarFichierNouveau);
        MenuBarFichier.add(jSeparator2);

        MenuBarFichierOuvrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarFichierOuvrir.setLabel("Ouvrir");
        MenuBarFichierOuvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarFichierOuvrirActionPerformed(evt);
            }
        });
        MenuBarFichier.add(MenuBarFichierOuvrir);
        MenuBarFichier.add(jSeparator3);

        MenuBarFichierEnregistrer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarFichierEnregistrer.setText("Enregistrer");
        MenuBarFichierEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarFichierEnregistrerActionPerformed(evt);
            }
        });
        MenuBarFichier.add(MenuBarFichierEnregistrer);
        MenuBarFichier.add(jSeparator4);

        MenuBarFichierExporter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarFichierExporter.setText("Exporter");
        MenuBarFichierExporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarFichierExporterActionPerformed(evt);
            }
        });
        MenuBarFichier.add(MenuBarFichierExporter);
        MenuBarFichier.add(jSeparator1);

        MenuBarFichierQuitter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarFichierQuitter.setLabel("Quitter");
        MenuBarFichierQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarFichierQuitterActionPerformed(evt);
            }
        });
        MenuBarFichier.add(MenuBarFichierQuitter);

        MenuBar.add(MenuBarFichier);

        MenuBarEdition.setText("√âdition");

        MenuBarEditionAnnuler.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarEditionAnnuler.setText("Annuler");
        MenuBarEdition.add(MenuBarEditionAnnuler);

        MenuBarEditionRetablir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarEditionRetablir.setText("R√©tablir");
        MenuBarEditionRetablir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarEditionRetablirActionPerformed(evt);
            }
        });
        MenuBarEdition.add(MenuBarEditionRetablir);
        MenuBarEdition.add(jSeparator6);

        MenuBarEditionSupprimer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        MenuBarEditionSupprimer.setText("Supprimer");
        MenuBarEditionSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarEditionSupprimerActionPerformed(evt);
            }
        });
        MenuBarEdition.add(MenuBarEditionSupprimer);

        MenuBar.add(MenuBarEdition);

        MenuBarAffichage.setText("Affichage");

        MenuBarAffichageMaximiser.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        MenuBarAffichageMaximiser.setText("Maximiser");
        MenuBarAffichageMaximiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBarAffichageMaximiserActionPerformed(evt);
            }
        });
        MenuBarAffichage.add(MenuBarAffichageMaximiser);

        MenuBarAffichageZoom.setText("Zoom");

        Zoom0.setText("0%");
        Zoom0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zoom0ActionPerformed(evt);
            }
        });
        MenuBarAffichageZoom.add(Zoom0);

        Zoom25.setText("25%");
        Zoom25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zoom25ActionPerformed(evt);
            }
        });
        MenuBarAffichageZoom.add(Zoom25);

        Zoom50.setText("50%");
        Zoom50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zoom50ActionPerformed(evt);
            }
        });
        MenuBarAffichageZoom.add(Zoom50);

        Zoom75.setText("75%");
        Zoom75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zoom75ActionPerformed(evt);
            }
        });
        MenuBarAffichageZoom.add(Zoom75);

        Zoom100.setText("100%");
        Zoom100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Zoom100ActionPerformed(evt);
            }
        });
        MenuBarAffichageZoom.add(Zoom100);

        MenuBarAffichage.add(MenuBarAffichageZoom);

        MenuBar.add(MenuBarAffichage);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FenetrePrincipale)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FenetrePrincipale)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuBarFichierOuvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarFichierOuvrirActionPerformed
        JFrame parent = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Charger");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier RecyclApp (.recyc)", "recyc", "RecyclApp");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showOpenDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) 
        {
            File file = fileChooser.getSelectedFile();
            if (!this.controller.Load(file.getPath()))
                JOptionPane.showMessageDialog(null, "Une erreur est survenue lors du chargement du fichier.");
            else
                drawingPanel.repaint();
        }        // TODO add your handling code here:

    }//GEN-LAST:event_MenuBarFichierOuvrirActionPerformed

    private void MenuBarFichierExporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarFichierExporterActionPerformed

    BufferedImage bi = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_RGB);
    Graphics2D g = bi.createGraphics();
    drawingPanel.paint(g);

    JFrame parent = new JFrame();
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Exporter");
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Image au format JPEG(.jpg)", "jpg");
    fileChooser.setFileFilter(filter);
    int userSelection = fileChooser.showSaveDialog(parent);
    if (userSelection == JFileChooser.APPROVE_OPTION)
    {
        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getPath();
        if (!filePath.endsWith(".jpg"))
        filePath += ".jpg";
        fileToSave = new File(filePath);
        if (fileToSave.exists() && !fileToSave.isDirectory())
        {
            String msg = "Un fichier portant ce nom existe d√©j√†. Voulez-vous le remplacer?";
            if (JOptionPane.showConfirmDialog(null, msg, "Remplacer un fichier", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
            return;
        }
        try {
            ImageIO.write(bi, "jpg", fileToSave);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Une erreur est survenue lors de l'exportation du fichier.");
        }
        }
    }//GEN-LAST:event_MenuBarFichierExporterActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void MenuBarFichierQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarFichierQuitterActionPerformed
        if(this.controller.reqFichier()== null){
            int n = JOptionPane.showConfirmDialog(
            this,
            "Voulez vous vraiment quitter? Tous les changements non sauvegard√©s seront perdus",
            "Quitter",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
            if (n == 0) {System.exit(0);}
        }
        else{
            System.exit(0);
        }
    }//GEN-LAST:event_MenuBarFichierQuitterActionPerformed

    private void BoutonAjouterStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAjouterStationActionPerformed
        this.setMode(ModesNoeuds.STATION);
        this.setMode(ApplicationMode.ADD);
    }//GEN-LAST:event_BoutonAjouterStationActionPerformed

    private void BoutonAjouterJonctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAjouterJonctionActionPerformed
        setMode(ApplicationMode.ADD);
        setMode(ModesNoeuds.JONCTION);
    }//GEN-LAST:event_BoutonAjouterJonctionActionPerformed

    private void BoutonAjouterEntreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAjouterEntreeActionPerformed
        setMode(ApplicationMode.ADD);
        setMode(ModesNoeuds.ENTREE);
    }//GEN-LAST:event_BoutonAjouterEntreeActionPerformed

    private void BoutonAjouterSortieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAjouterSortieActionPerformed
        setMode(ApplicationMode.ADD);
        setMode(ModesNoeuds.SORTIE);
    }//GEN-LAST:event_BoutonAjouterSortieActionPerformed

    private void BoutonAjouterConvoyeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAjouterConvoyeurActionPerformed

        setMode(ApplicationMode.ADD);
        setMode(ModesNoeuds.CONVOYEUR1);
    }//GEN-LAST:event_BoutonAjouterConvoyeurActionPerformed

    private void BoutonZoomPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonZoomPlusActionPerformed
        // TODO add your handling code here:
        int n = controller.reqZoom();
            controller.asgZoom(n + 1);
            Dimension dimUsine = controller.reqUsine().reqDimensions();
            double x = dimUsine.getWidth();
            double y = dimUsine.getHeight();
            Dimension dim = new Dimension((int)x*drawingPanel.reqZoom(), (int)y*drawingPanel.reqZoom());
            drawingPanel.setPreferredSize(dim);

        pointUsine = controller.PIXEL_PER_METER * controller.reqZoom();
        drawingPanel.repaint();
    }//GEN-LAST:event_BoutonZoomPlusActionPerformed

    private void BoutonZoomMoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonZoomMoinsActionPerformed
        // TODO add your handling code here:
        int n = controller.reqZoom(); 
        if(n - 1 > 0)
                controller.asgZoom(n - 1);
            Dimension dimUsine = controller.reqUsine().reqDimensions();
            double x = dimUsine.getWidth();
            double y = dimUsine.getHeight();
            Dimension dim = new Dimension((int)x*drawingPanel.reqZoom(), (int)y*drawingPanel.reqZoom());
            drawingPanel.setPreferredSize(dim);
          pointUsine = controller.PIXEL_PER_METER * controller.reqZoom();
        drawingPanel.repaint();
    }//GEN-LAST:event_BoutonZoomMoinsActionPerformed

    private void BoutonGrilleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonGrilleActionPerformed
    if (drawingPanel.reqGrille() == false)
        {
        this.BoutonGrilleMagnetique.setEnabled(true);
        ActiverGrille activerGrille = new ActiverGrille(this, true);
        activerGrille.setLocationRelativeTo(this);
        activerGrille.setVisible(true);
        drawingPanel.asgGrille(true, activerGrille.getTaille());
        this.taille = activerGrille.getTaille();
        }
        else if (drawingPanel.reqGrille() == true)
        {
            this.BoutonGrilleMagnetique.setEnabled(false);
            this.BoutonGrilleMagnetique.setSelected(false);
            magnetique = false;
            drawingPanel.asgGrille(false);
        }
        drawingPanel.repaint();
        
    }//GEN-LAST:event_BoutonGrilleActionPerformed

    private void drawingPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseMoved
        // TODO add your handling code here:
        Point mouseLocation = new Point(evt.getX(),evt.getY());
        if(controller.reqConvoyeurSelectionnerClick() != null){
            Details.setText(controller.convoyeurToString(controller.reqConvoyeurSelectionnerClick()));
        }
        else if(controller.reqEquipementSelectionnerClick() != null){
            Details.setText(controller.reqEquipementSelectionnerClick().toString()+ controller.equipementToString(controller.reqEquipementSelectionnerClick()));
        }
        else if(controller.selectEquipement(mouseLocation) != null)
        {
            Details.setText(controller.selectEquipement(mouseLocation).toString()+ controller.equipementToString(controller.selectEquipement(mouseLocation)));
        }
        
        else if(this.drawingPanel.getLigneConvoyeur(mouseLocation.x, mouseLocation.y)!=null){
            String str= new String();
            str += controller.convoyeurToString(this.drawingPanel.getLigneConvoyeur(mouseLocation.x, mouseLocation.y));
            Details.setText(str);
        }
        else
        {
            Details.setText("");
        }
        
        String position = new String();
        position += "Position pixel -- X : " + mouseLocation.getX() + " Y : " + mouseLocation.getY() + "     ";
        position += "Position m√®tre -- X : " + mouseLocation.getX()/pointUsine + " Y : " + mouseLocation.getY()/pointUsine + "\n";
        MousePosition.setText(position);      
    }//GEN-LAST:event_drawingPanelMouseMoved

    private void drawingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseClicked
        Point p = evt.getPoint();
        controller.asgEquipementSelectionnerClick(p);
        controller.asgConvoyeurSelectionnerClick(null);
        if(controller.reqEquipementSelectionnerClick() == null){
            controller.asgConvoyeurSelectionnerClick(this.drawingPanel.getLigneConvoyeur(p.x, p.y));
        }

        
        if (this.modeDeCreationDeNoeudSelectionne == JONCTION && this.applicationMode == ADD){
            AjouterJonction ajouterJonction = new AjouterJonction(this, true);
            ajouterJonction.setLocationRelativeTo(this);
            ajouterJonction.setVisible(true);
            final String nom = ajouterJonction.getNom();
            if(nom == null) {setMode(ModesNoeuds.RIEN); return;}
            final String description = ajouterJonction.getDescription();
            final Color couleur = ajouterJonction.getCouleur();
            final int capacite = ajouterJonction.getCapacite();
            final Dimension dimension = new Dimension(1, 1);
            if (magnetique == true) {
                double newX = p.getX()-(p.getX()%(taille*drawingPanel.reqZoom()));
                double newY = p.getY()-(p.getY()%(taille*drawingPanel.reqZoom()));
                p.setLocation(newX, newY);
            }
            boolean result = controller.ajouterEquipement(0, nom, description, couleur, dimension, p, capacite, modeDeCreationDeNoeudSelectionne);
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            ajouterJonction.dispose();
        }
        else if (this.modeDeCreationDeNoeudSelectionne == STATION && this.applicationMode == ADD) {
            AjouterStation ajouterStation = new AjouterStation(this, true);
            ajouterStation.setLocationRelativeTo(this);
            ajouterStation.setVisible(true);
            this.setMode(ModesNoeuds.STATION);
            this.setMode(ApplicationMode.ADD);
            final String nom = ajouterStation.getNom();
            if(nom == null) {setMode(ModesNoeuds.RIEN); return;}
            final String description = ajouterStation.getDescription();
            final int largeur = ajouterStation.getLargeur();
            final int hauteur = ajouterStation.getHauteur();
            final Dimension dimension = new Dimension(largeur, hauteur);
            final Color couleur = ajouterStation.getCouleur();
            final int capacite = ajouterStation.getCapacite();
            final int sorties = ajouterStation.getSorties();
            if (magnetique == true) {
                double newX = p.getX()-(p.getX()%(taille*drawingPanel.reqZoom()));
                double newY = p.getY()-(p.getY()%(taille*drawingPanel.reqZoom()));
                p.setLocation(newX, newY);
            }            
            if (ajouterStation.getCheminImage().isEmpty())
            {
                boolean result = controller.ajouterEquipement(sorties, nom, description, couleur, dimension, p, capacite, modeDeCreationDeNoeudSelectionne);
            }
            else
            {
                try {
                    Image image = ImageIO.read(new File(ajouterStation.getCheminImage()));
                    boolean result = controller.ajouterEquipement(sorties, nom, description, couleur, dimension, p, capacite, modeDeCreationDeNoeudSelectionne, image, ajouterStation.getCheminImage());
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            ajouterStation.dispose();
        }
        else if (this.modeDeCreationDeNoeudSelectionne == ENTREE && this.applicationMode == ADD) {
            AjouterEntree ajouterEntree = new AjouterEntree(this, true);
            ajouterEntree.setLocationRelativeTo(this);
            ajouterEntree.setVisible(true);
            final String nom = ajouterEntree.getNom();
            if(nom == null) {setMode(ModesNoeuds.RIEN); return;}
            final String description = ajouterEntree.getDescription();
            final Color couleur = ajouterEntree.getCouleur();
            final Dimension dimension = new Dimension(1, 1);
            final JTable produitsEntree = ajouterEntree.getProduitsEntree();
             if (magnetique == true) {
                double newX = p.getX()-(p.getX()%(taille*drawingPanel.reqZoom()));
                double newY = p.getY()-(p.getY()%(taille*drawingPanel.reqZoom()));
                p.setLocation(newX, newY);
            }           
            boolean result = controller.ajouterEquipement(0, nom, description, couleur, dimension, p, 0, modeDeCreationDeNoeudSelectionne);
            controller.asgPanierEntree(produitsEntree, (EntreeUsine) controller.reqUsine().reqListeEquipement().get(controller.reqUsine().reqListeEquipement().size()-1));
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            ajouterEntree.dispose();
        }
        else if (this.modeDeCreationDeNoeudSelectionne == SORTIE && this.applicationMode == ADD) {
            AjouterSortie ajouterSortie = new AjouterSortie(this, true);
            ajouterSortie.setLocationRelativeTo(this);
            ajouterSortie.setVisible(true);
            final String nom = ajouterSortie.getNom();
            if(nom == null) {setMode(ModesNoeuds.RIEN); return;}
            final String description = ajouterSortie.getDescription();
            final Color couleur = ajouterSortie.getCouleur();
            final Dimension dimension = new Dimension(1, 1);
            if (magnetique == true) {
                double newX = p.getX()-(p.getX()%(taille*drawingPanel.reqZoom()));
                double newY = p.getY()-(p.getY()%(taille*drawingPanel.reqZoom()));
                p.setLocation(newX, newY);
            }            
            boolean result = controller.ajouterEquipement(0, nom, description, couleur, dimension, p, 0, modeDeCreationDeNoeudSelectionne);
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            ajouterSortie.dispose();
            
        }
        else if(this.modeDeCreationDeNoeudSelectionne == CONVOYEUR1 && this.applicationMode == ADD )
        {
            if(controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()) == null && controller.reqDerneirEquipementSelectionnerClick() != null)
            {
                AjouterConvoyeur ajouterConvoyeur = new AjouterConvoyeur(this, true);
                ajouterConvoyeur.setLocationRelativeTo(this);
                ajouterConvoyeur.setVisible(true);
                if (ajouterConvoyeur.confirmation == true) {
                    controller.reqUsine().ajouterConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner());  
                    final Color couleur = ajouterConvoyeur.getCouleur();
                    final int capacite = ajouterConvoyeur.getCapacite();
                    controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()).asgCouleur(couleur);
                    controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()).asgCapaciteMax(capacite);
                    // assigner √† la matrice quand la sortie du convoyeur est une station
                    if (controller.reqEquipementSelectionner() instanceof Station){
                        controller.ajouterMatriceStation((Station)controller.reqEquipementSelectionner(), controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()).reqPanier());  
                    }
                }
                else {this.modeDeCreationDeNoeudSelectionne = ModesNoeuds.RIEN; this.applicationMode = ApplicationMode.SELECT;}
                ajouterConvoyeur.dispose();
                this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            }
            else if(controller.reqDerneirEquipementSelectionnerClick() instanceof Station && controller.reqDerneirEquipementSelectionnerClick() != null)
            {
                AjouterConvoyeur ajouterConvoyeur = new AjouterConvoyeur(this, true);
                ajouterConvoyeur.setLocationRelativeTo(this);
                ajouterConvoyeur.setVisible(true);
                if (ajouterConvoyeur.confirmation == true) {
                    controller.reqUsine().ajouterConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner());  
                    final Color couleur = ajouterConvoyeur.getCouleur();
                    final int capacite = ajouterConvoyeur.getCapacite();
                    controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()).asgCouleur(couleur);
                    controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()).asgCapaciteMax(capacite);
                    // assigner √† la matrice quand la sortie du convoyeur est une station
                    if (controller.reqEquipementSelectionner() instanceof Station){
                        controller.ajouterMatriceStation((Station)controller.reqEquipementSelectionner(), controller.reqUsine().reqConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner()).reqPanier());  
                    }
                }
                else {this.modeDeCreationDeNoeudSelectionne = ModesNoeuds.RIEN; this.applicationMode = ApplicationMode.SELECT;}
                ajouterConvoyeur.dispose();
                this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            }
        }
        else if (evt.getClickCount() == 2 && controller.reqEquipementSelectionner() instanceof EntreeUsine)
        {
            EntreeUsine e = (EntreeUsine)controller.reqEquipementSelectionner();
            AjouterEntree ajouterEntree = new AjouterEntree(this,true,e.reqNomEquipement(),e.reqDescription(),e.reqCouleur(),e.reqConvoyeurs().get(0).reqPanier());
            ajouterEntree.setLocationRelativeTo(this);
            ajouterEntree.setVisible(true);
            this.setMode(ModesNoeuds.ENTREE);
            this.setMode(ApplicationMode.SELECT);
            
            final String nom = ajouterEntree.getNom();
            if(nom == null) {setMode(ModesNoeuds.RIEN); return;}
            final String description = ajouterEntree.getDescription();
            final Color couleur = ajouterEntree.getCouleur();
            Panier panier = ajouterEntree.getPanier();
            // assignation des changements √† l'entr√©e
            
            controller.reqEquipementSelectionner().asgNomEquipement(nom);
            controller.reqEquipementSelectionner().asgDescription(description);
            controller.reqEquipementSelectionner().asgCouleur(couleur);
            controller.reqEquipementSelectionner().reqConvoyeurs().get(0).asgPanier(panier);
            ajouterEntree.dispose();
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
        }
        
        else if (evt.getClickCount() == 2 && controller.reqEquipementSelectionner() instanceof Station)
        {
            Station s = (Station)controller.reqEquipementSelectionner();
            ModifierStation modifierStation = new ModifierStation(this,true,s.reqNbSortie(),s.reqNomStation(),s.reqDescription(),s.reqVraiCouleur(),s.reqDimension(),s.reqCapaciteMax(),s.reqMatrice(),s.reqCheminImage());
            modifierStation.setLocationRelativeTo(this);
            modifierStation.setVisible(true);
            
            this.setMode(ModesNoeuds.STATION);
            this.setMode(ApplicationMode.SELECT);
            
            final String nom = modifierStation.getNom();
            if(nom == null) {setMode(ModesNoeuds.RIEN); return;}
            final String description = modifierStation.getDescription();
            final int largeur = modifierStation.getLargeur();
            final int hauteur = modifierStation.getHauteur();
            final Dimension dimension = new Dimension(largeur, hauteur);
            final Color couleur = modifierStation.getCouleur();
            final int capacite = modifierStation.getCapacite();
            final int sorties = modifierStation.getSorties();
            // assignation des changements √† la station
            modifierStation.dispose();
            if (modifierStation.getCheminImage().isEmpty())
            {
                   controller.modifierStation((Station)controller.reqEquipementSelectionner(),nom,description,capacite,dimension,sorties,couleur,modifierStation.getMesProduits(),modifierStation.getMesListesDeQt(),modifierStation.getCheminImage(),null);

            }
            else
            {
                try {
                    Image image = ImageIO.read(new File(modifierStation.getCheminImage()));
                    controller.modifierStation((Station)controller.reqEquipementSelectionner(),nom,description,capacite,dimension,sorties,couleur,modifierStation.getMesProduits(),modifierStation.getMesListesDeQt(),modifierStation.getCheminImage(),image);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
        }
        
        else if (evt.getClickCount() == 2 && controller.reqConvoyeurSelectionnerClick() instanceof Convoyeur)
        {
            AjouterConvoyeur ajouterConvoyeur = new AjouterConvoyeur(this, true);
            ajouterConvoyeur.setLocationRelativeTo(this);
            ajouterConvoyeur.setVisible(true);
            if (ajouterConvoyeur.confirmation == true) {
                controller.reqUsine().ajouterConvoyeur(controller.reqDerneirEquipementSelectionnerClick(),controller.reqEquipementSelectionner());  
                final Color couleur = ajouterConvoyeur.getCouleur();
                final int capacite = ajouterConvoyeur.getCapacite();
                controller.reqConvoyeurSelectionnerClick().asgCouleur(couleur);
                controller.reqConvoyeurSelectionnerClick().asgCapaciteMax(capacite);
            }
        }

        controller.reqUsine().fonction();
        drawingPanel.repaint();
        String str = controller.reqUsine().PanierEntreeUsineToString() + controller.reqUsine().PanierSortieUsineToString() + "\n\n";
        str += "Concordance quantit√© Entr√©e -- Sortie : ";
        if((controller.reqUsine().panierEntreeUsine().quantiteTotal() == controller.reqUsine().panierSortieUsine().quantiteTotal()))
            str += "Oui";
        else
            str += "Non";
        PanierTextArea.setText(str);
        this.applicationMode = SELECT;
    }//GEN-LAST:event_drawingPanelMouseClicked

    private void drawingPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanelMouseDragged
        // TODO add your handling code here:
        Point mousePoint = evt.getPoint();
            if (magnetique == true) {
                double newX = mousePoint.getX()-(mousePoint.getX()%(taille*drawingPanel.reqZoom()));
                double newY = mousePoint.getY()-(mousePoint.getY()%(taille*drawingPanel.reqZoom()));
                Point p = new Point((int)newX, (int)newY);
                if(controller.getSelectionCourante() != null)
                {
                controller.deplacerEquipmentSelection(p);
                String position = new String();
                position += "Position pixel -- X : " + p.getX() + " Y : " + p.getY() + "     ";
                position += "Position m√®tre -- X : " + p.getX()/pointUsine + " Y : " + p.getY()/pointUsine + "\n";
                MousePosition.setText(position);
                drawingPanel.repaint();                
            }
            }
            else {
                Point p = mousePoint;
                if(controller.getSelectionCourante() != null)
                {
                controller.deplacerEquipmentSelection(p);
                String position = new String();
                position += "Position pixel -- X : " + p.getX() + " Y : " + p.getY() + "     ";
                position += "Position m√®tre -- X : " + p.getX()/pointUsine + " Y : " + p.getY()/pointUsine + "\n";
                MousePosition.setText(position);
                drawingPanel.repaint();                
            }
        {

        }
            }
    }//GEN-LAST:event_drawingPanelMouseDragged

    private void drawingPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawingPanelMouseWheelMoved
        // TODO add your handling code here:
        int n = controller.reqZoom();
        if(evt.getWheelRotation() > 0)
        {
            controller.asgZoom(n + 1);
            Dimension dimUsine = controller.reqUsine().reqDimensions();
            double x = dimUsine.getWidth();
            double y = dimUsine.getHeight();
            Dimension dim = new Dimension((int)x*drawingPanel.reqZoom(), (int)y*drawingPanel.reqZoom());
            drawingPanel.setPreferredSize(dim);
        }
        if(evt.getWheelRotation() < 0)
        {
            if(n - 1 > 0)
                controller.asgZoom(n - 1);
            Dimension dimUsine = controller.reqUsine().reqDimensions();
            double x = dimUsine.getWidth();
            double y = dimUsine.getHeight();
            Dimension dim = new Dimension((int)x*drawingPanel.reqZoom(), (int)y*drawingPanel.reqZoom());
            drawingPanel.setPreferredSize(dim);
        }
        pointUsine = controller.PIXEL_PER_METER * controller.reqZoom();
        drawingPanel.repaint();
    }//GEN-LAST:event_drawingPanelMouseWheelMoved

    private void BoutonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonSupprimerActionPerformed
        // TODO add your handling code here:
        if (this.controller.reqConvoyeurSelectionnerClick() != null){
            
            try
            {
                controller.reqUsine().supprimerConvoyeur(this.controller.reqConvoyeurSelectionnerClick());
                this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            }
            catch(Exception e)
            {
            System.out.println("Erreur supprimer un convoyeur");
            }

            drawingPanel.repaint();
        }
        else if (this.controller.reqEquipementSelectionnerClick() != null){
            controller.supprimerEquipementSelection();
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            drawingPanel.repaint();
        }
        
    }//GEN-LAST:event_BoutonSupprimerActionPerformed
   
    private void MenuBarEditionSupprimerActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if (this.controller.reqConvoyeurSelectionnerClick() != null){
            
            try
            {
                controller.reqUsine().supprimerConvoyeur(this.controller.reqConvoyeurSelectionnerClick());
                this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            }
            catch(Exception e)
            {
            System.out.println("Erreur supprimer un convoyeur");
            }

            drawingPanel.repaint();
        }
        else if (this.controller.reqEquipementSelectionnerClick() != null){
            controller.supprimerEquipementSelection();
            this.controller.reqEtats().SaveEtat(this.controller.reqUsine());
            drawingPanel.repaint();
        }
    }          
    
    private void BoutonGrilleMagnetiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonGrilleMagnetiqueActionPerformed
        if (this.BoutonGrilleMagnetique.isSelected() == true)
        {
            magnetique = true;
        }
        else
        {
            magnetique = false;
        }
    }//GEN-LAST:event_BoutonGrilleMagnetiqueActionPerformed

    private void MenuBarEditionRetablirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarEditionRetablirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuBarEditionRetablirActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        FenetrePrincipale.setDividerLocation(0.75);
        CotePanneaux.setDividerLocation(0.5);
    }//GEN-LAST:event_formComponentResized
                                 

    private void Zoom75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Zoom75ActionPerformed
        // TODO add your handling code here:
        controller.asgZoom(4);
        drawingPanel.repaint();
    }//GEN-LAST:event_Zoom75ActionPerformed
   
    private void Zoom100ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        controller.asgZoom(5);
        drawingPanel.repaint();
    }   
    
    private void Zoom50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Zoom50ActionPerformed
        // TODO add your handling code here:
        controller.asgZoom(3);
        drawingPanel.repaint();
    }//GEN-LAST:event_Zoom50ActionPerformed

    private void Zoom25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Zoom25ActionPerformed
        // TODO add your handling code here:
        controller.asgZoom(2);
        drawingPanel.repaint();
    }//GEN-LAST:event_Zoom25ActionPerformed

    private void Zoom0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Zoom0ActionPerformed
        // TODO add your handling code here:
        controller.asgZoom(1);
        Dimension dimUsine = controller.reqUsine().reqDimensions();
        double x = dimUsine.getWidth();
        double y = dimUsine.getHeight();
        Dimension dim = new Dimension((int)x*drawingPanel.reqZoom(), (int)y*drawingPanel.reqZoom());
        drawingPanel.setPreferredSize(dim);
        drawingPanel.repaint();
    }//GEN-LAST:event_Zoom0ActionPerformed

    private void MenuBarAffichageMaximiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarAffichageMaximiserActionPerformed
        // TODO add your handling code here:
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_MenuBarAffichageMaximiserActionPerformed

    private void BoutonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAnnulerActionPerformed

        this.controller.undo();
        this.drawingPanel.repaint();
    }//GEN-LAST:event_BoutonAnnulerActionPerformed

    private void BoutonRefaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRefaireActionPerformed
        this.controller.redo();
        this.drawingPanel.repaint();
    }//GEN-LAST:event_BoutonRefaireActionPerformed

    private void BoutonOuvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonOuvrirActionPerformed
        JFrame parent = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Charger");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier RecyclApp (.recyc)", "recyc", "RecyclApp");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showOpenDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) 
        {
            File file = fileChooser.getSelectedFile();
            if (!this.controller.Load(file.getPath()))
                JOptionPane.showMessageDialog(null, "Une erreur est survenue lors du chargement du fichier.");
            else
                drawingPanel.repaint();
        }
    }//GEN-LAST:event_BoutonOuvrirActionPerformed

    private void BoutonEnresgistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonEnresgistrerActionPerformed
        JFrame parent = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Sauvegarder");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier RecyclApp (.recyc)", "recyc");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) 
        {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getPath();
            if (!filePath.endsWith(".recyc"))
                filePath += ".recyc";
            
            file = new File(filePath);
            if (file.exists() && !file.isDirectory())
            {
                String msg = "Voulez-vous remplacer ce fichier?";
                if (JOptionPane.showConfirmDialog(null, msg, "Remplacer un fichier", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
                    return;
            }
                
            if (!this.controller.Save(filePath))
                JOptionPane.showMessageDialog(null, "Une erreur est survenue lors de l'enregistrement du fichier.");
        }
    }//GEN-LAST:event_BoutonEnresgistrerActionPerformed

    private void MenuBarFichierEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBarFichierEnregistrerActionPerformed
      JFrame parent = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Sauvegarder");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier RecyclApp (.recyc)", "recyc");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(parent);

        if (userSelection == JFileChooser.APPROVE_OPTION) 
        {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getPath();
            if (!filePath.endsWith(".recyc"))
                filePath += ".recyc";
            
            file = new File(filePath);
            if (file.exists() && !file.isDirectory())
            {
                String msg = "Voulez-vous remplacer ce fichier?";
                if (JOptionPane.showConfirmDialog(null, msg, "Remplacer un fichier", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
                    return;
            }
                
            if (!this.controller.Save(filePath))
                JOptionPane.showMessageDialog(null, "Une erreur est survenue lors de l'enregistrement du fichier.");
        }
    }//GEN-LAST:event_MenuBarFichierEnregistrerActionPerformed
                                       
    private void MenuBarEditionAnnulerActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }               
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    public void setMode(ModesNoeuds newMode) {
        this.modeDeCreationDeNoeudSelectionne = newMode;
    }
    
    public void setMode(ApplicationMode newMode) {
        this.applicationMode = newMode;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BoutonAjouterConvoyeur;
    private javax.swing.JButton BoutonAjouterEntree;
    private javax.swing.JButton BoutonAjouterJonction;
    private javax.swing.JButton BoutonAjouterSortie;
    private javax.swing.JButton BoutonAjouterStation;
    private javax.swing.JButton BoutonAnnuler;
    private javax.swing.JButton BoutonEnresgistrer;
    private javax.swing.JToggleButton BoutonGrille;
    private javax.swing.JToggleButton BoutonGrilleMagnetique;
    private javax.swing.JButton BoutonNouveau;
    private javax.swing.JButton BoutonOuvrir;
    private javax.swing.JButton BoutonRefaire;
    private javax.swing.JButton BoutonSupprimer;
    private javax.swing.JButton BoutonZoomMoins;
    private javax.swing.JButton BoutonZoomPlus;
    private javax.swing.JFileChooser ChoisirFichier;
    private javax.swing.JTextArea Console;
    private javax.swing.JScrollPane ConteneurConsole;
    private javax.swing.JScrollPane ConteneurPlan;
    private javax.swing.JScrollPane ContenurDetails;
    private javax.swing.JSplitPane CotePanneaux;
    private javax.swing.JPanel CotePlan;
    private javax.swing.JTextArea Details;
    private javax.swing.JSplitPane FenetrePrincipale;
    private javax.swing.JLabel LabelDetails;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuBarAffichage;
    private javax.swing.JMenuItem MenuBarAffichageMaximiser;
    private javax.swing.JMenu MenuBarAffichageZoom;
    private javax.swing.JMenu MenuBarEdition;
    private javax.swing.JMenuItem MenuBarEditionAnnuler;
    private javax.swing.JMenuItem MenuBarEditionRetablir;
    private javax.swing.JMenuItem MenuBarEditionSupprimer;
    private javax.swing.JMenu MenuBarFichier;
    private javax.swing.JMenuItem MenuBarFichierEnregistrer;
    private javax.swing.JMenuItem MenuBarFichierExporter;
    private javax.swing.JMenuItem MenuBarFichierNouveau;
    private javax.swing.JMenuItem MenuBarFichierOuvrir;
    private javax.swing.JMenuItem MenuBarFichierQuitter;
    private javax.swing.JLabel MousePosition;
    private javax.swing.JTextArea PanierTextArea;
    private javax.swing.JPanel PanneauConsole;
    private javax.swing.JTabbedPane PanneauConsolePanier;
    private javax.swing.JPanel PanneauDetails;
    private javax.swing.JPanel PanneauPanier;
    private javax.swing.JToolBar.Separator SeparateurSideBar;
    private javax.swing.JToolBar SideBar;
    private javax.swing.JToolBar TopBar;
    private javax.swing.JMenuItem Zoom0;
    private javax.swing.JMenuItem Zoom100;
    private javax.swing.JMenuItem Zoom25;
    private javax.swing.JMenuItem Zoom50;
    private javax.swing.JMenuItem Zoom75;
    public recyclapp.gui.DrawingPanel drawingPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    // End of variables declaration//GEN-END:variables
}
